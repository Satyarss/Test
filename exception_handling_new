from fastapi.testclient import TestClient
from app.main import app  # Adjust if your app entry point is elsewhere

client = TestClient(app)

# ✅ Valid base payload
valid_payload = {
    "benefitProductType": "Medical",
    "membershipID": "5~186103331+10+7+20240101+793854+BA+829",
    "planIdentifier": "PlanX",
    "serviceInfo": [
        {
            "serviceCodeInfo": {
                "providerType": [{"code": "HO"}],
                "placeOfService": [{"code": "11"}],
                "providerSpecialty": [{"code": "91017"}],
                "code": "99214",
                "type": "CPT4"
            }
        }
    ]
}


# ✅ Test 1: Completely valid payload
def test_valid_payload_returns_200_or_business_response():
    response = client.post("/benefit", json=valid_payload)
    assert response.status_code in [200, 400]  # depending on internal logic
    assert response.json() is not None


# ✅ Test 2: Missing `membershipID` should trigger 400
def test_missing_membership_id():
    payload = valid_payload.copy()
    del payload["membershipID"]

    response = client.post("/benefit", json=payload)
    assert response.status_code == 400
    assert "Malformed request" in response.text


# ✅ Test 3: Missing `serviceInfo` field
def test_missing_service_info():
    payload = valid_payload.copy()
    del payload["serviceInfo"]

    response = client.post("/benefit", json=payload)
    assert response.status_code == 400
    assert "Malformed request" in response.text


# ✅ Test 4: Wrong data type in `serviceInfo` (string instead of list)
def test_service_info_wrong_type():
    payload = valid_payload.copy()
    payload["serviceInfo"] = "invalid_string"

    response = client.post("/benefit", json=payload)
    assert response.status_code in [400, 422]
    assert "serviceInfo" in response.text


# ✅ Test 5: Missing nested `providerType` list
def test_missing_provider_type_in_service_info():
    payload = valid_payload.copy()
    payload["serviceInfo"][0]["serviceCodeInfo"].pop("providerType", None)

    response = client.post("/benefit", json=payload)
    assert response.status_code in [400, 422]
    assert "providerType" in response.text or "Malformed request" in response.text


# ✅ Test 6: Missing top-level field `benefitProductType`
def test_missing_benefit_product_type():
    payload = valid_payload.copy()
    del payload["benefitProductType"]

    response = client.post("/benefit", json=payload)
    assert response.status_code == 400
    assert "Malformed request" in response.text
