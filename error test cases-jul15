N133723@MACL2KVFV33RR cost-estimator-calc-service % python3 -m pytest tests
================================================================= test session starts =================================================================
platform darwin -- Python 3.12.4, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/N133723/Desktop/TLABCHAAT-354/cost-estimator-calc-service
configfile: pytest.ini
plugins: anyio-4.9.0
collected 32 items                                                                                                                                    

tests/test_integration.py F.FFFF                                                                                                                [ 18%]
tests/test_integration_real.py sFsss                                                                                                            [ 34%]
tests/test_main.py .....                                                                                                                        [ 50%]
tests/test_repository.py ...EEEF                                                                                                                [ 71%]
tests/test_service.py ......FFF                                                                                                                 [100%]

======================================================================= ERRORS ========================================================================
____________________________________________________ ERROR at setup of test_rate_criteria_creation ____________________________________________________

    @pytest.fixture
    def rate_criteria():
        """Provide rate criteria for testing."""
        from app.models.rate_criteria import CostEstimatorRateCriteria
    
>       return CostEstimatorRateCriteria(
            serviceCode="99213",
            providerIdentificationNumber="1234567890",
            placeOfService="11",
            serviceType="1",
            networkId="NET001",
            serviceLocationNumber="LOC001",
            zipCode="85305",
            isOutofNetwork=False,
        )
E       TypeError: CostEstimatorRateCriteria.__init__() missing 2 required positional arguments: 'providerSpecialtyCode' and 'providerType'

tests/conftest.py:88: TypeError
__________________________________________________ ERROR at setup of test_repository_initialization ___________________________________________________

    @pytest.fixture
    def rate_criteria():
        """Provide rate criteria for testing."""
        from app.models.rate_criteria import CostEstimatorRateCriteria
    
>       return CostEstimatorRateCriteria(
            serviceCode="99213",
            providerIdentificationNumber="1234567890",
            placeOfService="11",
            serviceType="1",
            networkId="NET001",
            serviceLocationNumber="LOC001",
            zipCode="85305",
            isOutofNetwork=False,
        )
E       TypeError: CostEstimatorRateCriteria.__init__() missing 2 required positional arguments: 'providerSpecialtyCode' and 'providerType'

tests/conftest.py:88: TypeError
______________________________________________________ ERROR at setup of test_build_rate_params _______________________________________________________

    @pytest.fixture
    def rate_criteria():
        """Provide rate criteria for testing."""
        from app.models.rate_criteria import CostEstimatorRateCriteria
    
>       return CostEstimatorRateCriteria(
            serviceCode="99213",
            providerIdentificationNumber="1234567890",
            placeOfService="11",
            serviceType="1",
            networkId="NET001",
            serviceLocationNumber="LOC001",
            zipCode="85305",
            isOutofNetwork=False,
        )
E       TypeError: CostEstimatorRateCriteria.__init__() missing 2 required positional arguments: 'providerSpecialtyCode' and 'providerType'

tests/conftest.py:88: TypeError
====================================================================== FAILURES =======================================================================
______________________________________________________________ test_full_api_integration ______________________________________________________________

client = <starlette.testclient.TestClient object at 0x106c70b90>

    @pytest.mark.integration
    def test_full_api_integration(client):
        """Test the complete API integration flow."""
        # Test data
        request_data = {
            "membershipId": "5~186103331+10+7+20240101+793854+8A+829",
            "zipCode": "85305",
            "benefitProductType": "Medical",
            "languageCode": "11",
            "service": {
                "code": "99214",
                "type": "CPT4",
                "description": "Adult Office visit Age 30-39",
                "supportingService": {"code": "470", "type": "DRG"},
                "modifier": {"modifierCode": "E1"},
                "diagnosisCode": "F33 40",
                "placeOfService": {"code": "11"}
            },
            "providerInfo": [
                {
                    "serviceLocation": "000761071",
                    "providerType": "HO",
                    "specialty": {"code": "91017"},
                    "taxIdentificationNumber": "0000431173518",
                    "taxIdQualifier": "SN",
                    "providerNetworks": {"networkID": "58921"},
                    "providerIdentificationNumber": "0004000317",
                    "nationalProviderIdentifier": {"nationalProviderId": "1386660504"},
                    "providerNetworkParticipation": {"providerTier": "1"}
                }
            ]
        }
    
        # Mock external services to avoid actual API calls
        with patch("app.services.impl.benefit_service_impl.BenefitServiceImpl.get_benefit") as mock_benefit, \
             patch("app.services.impl.accumulator_service_impl.AccumulatorServiceImpl.get_accumulator") as mock_accumulator, \
             patch("app.repository.impl.cost_estimator_repository_impl.CostEstimatorRepositoryImpl.get_rate") as mock_rate:
    
            # Setup mock responses
            mock_benefit.return_value = {"benefit": "test_benefit_data"}
            mock_accumulator.return_value = {"accumulator": "test_accumulator_data"}
            mock_rate.return_value = 150.50
    
            # Make API request
            response = client.post("/costestimator/v1/rate", json=request_data)
    
            # Verify response
>           assert response.status_code == 200
E           assert 400 == 200
E            +  where 400 = <Response [400 Bad Request]>.status_code

tests/test_integration.py:61: AssertionError
---------------------------------------------------------------- Captured stdout call -----------------------------------------------------------------
2025-07-15 10:51:29,380 | INFO | cost_estimator_calc_service | Async SpannerClient initialized for database: projects/anbc-hcb-dev/instances/provider-de/databases/cost-estimator-secure
2025-07-15 10:51:29,380 | INFO | cost_estimator_calc_service | Connection pool size: 10, Max workers: 20
------------------------------------------------------------------ Captured log call ------------------------------------------------------------------
INFO     cost_estimator_calc_service:spanner_client.py:43 Async SpannerClient initialized for database: projects/anbc-hcb-dev/instances/provider-de/databases/cost-estimator-secure
INFO     cost_estimator_calc_service:spanner_client.py:46 Connection pool size: 10, Max workers: 20
_______________________________________________________________ test_api_error_handling _______________________________________________________________

client = <starlette.testclient.TestClient object at 0x106d41040>

    @pytest.mark.integration
    def test_api_error_handling(client):
        """Test API error handling when external services fail."""
        request_data = {
            "membershipId": "5~186103331+10+7+20240101+793854+8A+829",
            "zipCode": "85305",
            "benefitProductType": "Medical",
            "languageCode": "11",
            "service": {
                "code": "99214",
                "type": "CPT4",
                "description": "Adult Office visit Age 30-39",
                "placeOfService": {"code": "11"}
            },
            "providerInfo": [
                {
                    "serviceLocation": "000761071",
                    "providerType": "HO",
                    "specialty": {"code": "91017"},
                    "taxIdentificationNumber": "0000431173518",
                    "taxIdQualifier": "SN",
                    "providerNetworks": {"networkID": "58921"},
                    "providerIdentificationNumber": "0004000317",
                    "nationalProviderIdentifier": {"nationalProviderId": "1386660504"},
                    "providerNetworkParticipation": {"providerTier": "1"}
                }
            ]
        }
    
        # Mock external service to raise an exception
        with patch("app.services.impl.benefit_service_impl.BenefitServiceImpl.get_benefit") as mock_benefit:
            mock_benefit.side_effect = Exception("Benefit service unavailable")
    
            response = client.post("/costestimator/v1/rate", json=request_data)
            assert response.status_code == 400  # Service handles errors gracefully
            result = response.json()
            assert "message" in result
>           assert "rate" in result
E           AssertionError: assert 'rate' in {'correlationId': '069d197a-1e14-453f-8cf4-63f74eb626ff', 'detail': 'Malformed request', 'errors': {'Missing fields': ...agnosisCode', 'providerInfo.0.speciality', 'providerInfo.0.nationalProviderId']}, 'message': 'Additional details', ...}

tests/test_integration.py:124: AssertionError
---------------------------------------------------------------- Captured stdout call -----------------------------------------------------------------
2025-07-15 10:51:29,404 | INFO | cost_estimator_calc_service | Async SpannerClient initialized for database: projects/anbc-hcb-dev/instances/provider-de/databases/cost-estimator-secure
2025-07-15 10:51:29,404 | INFO | cost_estimator_calc_service | Connection pool size: 10, Max workers: 20
------------------------------------------------------------------ Captured log call ------------------------------------------------------------------
INFO     cost_estimator_calc_service:spanner_client.py:43 Async SpannerClient initialized for database: projects/anbc-hcb-dev/instances/provider-de/databases/cost-estimator-secure
INFO     cost_estimator_calc_service:spanner_client.py:46 Connection pool size: 10, Max workers: 20
_______________________________________________________ test_service_integration_with_real_data _______________________________________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
_______________________________________________________________ test_mapper_integration _______________________________________________________________

    @pytest.mark.integration
    def test_mapper_integration():
        """Test the complete mapper integration."""
        from app.mappers.cost_estimator_mapper import CostEstimatorMapper
        from app.schemas.cost_estimator_request import CostEstimatorRequest
    
        # Test data
        request_data = {
            "membershipId": "5~186103331+10+7+20240101+793854+8A+829",
            "zipCode": "85305",
            "benefitProductType": "Medical",
            "languageCode": "11",
            "service": {
                "code": "99214",
                "type": "CPT4",
                "description": "Adult Office visit Age 30-39",
                "supportingService": {"code": "470", "type": "DRG"},
                "modifier": {"modifierCode": "E1"},
                "diagnosisCode": "F33 40",
                "placeOfService": {"code": "11"}
            },
            "providerInfo": [
                {
                    "serviceLocation": "000761071",
                    "providerType": "HO",
                    "specialty": {"code": "91017"},
                    "taxIdentificationNumber": "0000431173518",
                    "taxIdQualifier": "SN",
                    "providerNetworks": {"networkID": "58921"},
                    "providerIdentificationNumber": "0004000317",
                    "nationalProviderIdentifier": {"nationalProviderId": "1386660504"},
                    "providerNetworkParticipation": {"providerTier": "1"}
                }
            ]
        }
    
>       request = CostEstimatorRequest(**request_data)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CostEstimatorRequest
E       providerInfo.0.speciality
E         Field required [type=missing, input_value={'serviceLocation': '0007...: {'providerTier': '1'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       providerInfo.0.nationalProviderId
E         Field required [type=missing, input_value={'serviceLocation': '0007...: {'providerTier': '1'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_integration.py:228: ValidationError
________________________________________________________________ test_end_to_end_flow _________________________________________________________________

    @pytest.mark.integration
    def test_end_to_end_flow():
        """Test the complete end-to-end flow from request to response."""
        from app.services.impl.cost_estimation_service_impl import CostEstimationServiceImpl
        from app.schemas.cost_estimator_request import CostEstimatorRequest
        from app.mappers.cost_estimator_mapper import CostEstimatorMapper
    
        # Test data
        request_data = {
            "membershipId": "5~186103331+10+7+20240101+793854+8A+829",
            "zipCode": "85305",
            "benefitProductType": "Medical",
            "languageCode": "11",
            "service": {
                "code": "99214",
                "type": "CPT4",
                "description": "Adult Office visit Age 30-39",
                "placeOfService": {"code": "11"}
            },
            "providerInfo": [
                {
                    "serviceLocation": "000761071",
                    "providerType": "HO",
                    "specialty": {"code": "91017"},
                    "taxIdentificationNumber": "0000431173518",
                    "taxIdQualifier": "SN",
                    "providerNetworks": {"networkID": "58921"},
                    "providerIdentificationNumber": "0004000317",
                    "nationalProviderIdentifier": {"nationalProviderId": "1386660504"},
                    "providerNetworkParticipation": {"providerTier": "1"}
                }
            ]
        }
    
        # Create request object
>       request = CostEstimatorRequest(**request_data)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       pydantic_core._pydantic_core.ValidationError: 5 validation errors for CostEstimatorRequest
E       service.supportingService
E         Field required [type=missing, input_value={'code': '99214', 'type':...ervice': {'code': '11'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       service.modifier
E         Field required [type=missing, input_value={'code': '99214', 'type':...ervice': {'code': '11'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       service.diagnosisCode
E         Field required [type=missing, input_value={'code': '99214', 'type':...ervice': {'code': '11'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       providerInfo.0.speciality
E         Field required [type=missing, input_value={'serviceLocation': '0007...: {'providerTier': '1'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       providerInfo.0.nationalProviderId
E         Field required [type=missing, input_value={'serviceLocation': '0007...: {'providerTier': '1'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_integration.py:280: ValidationError
____________________________________________________________ test_real_service_integration ____________________________________________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
______________________________________________________________ test_extract_single_value ______________________________________________________________

    @pytest.mark.repository
    def test_extract_single_value():
        """Test the _extract_single_value method."""
        from app.repository.impl.cost_estimator_repository_impl import (
            CostEstimatorRepositoryImpl,
        )
    
        with patch(
            "app.repository.impl.cost_estimator_repository_impl.spanner_config"
        ) as mock_config:
            mock_config.is_valid.return_value = True
            mock_config.project_id = "test-project"
            mock_config.instance_id = "test-instance"
            mock_config.database_id = "test-database"
    
            with patch("app.repository.impl.cost_estimator_repository_impl.SpannerClient"):
                repository = CostEstimatorRepositoryImpl()
    
                # Test with numeric result
                result = [[150.75]]
>               value = repository._extract_single_value(result, default_value=0.0)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E               TypeError: CostEstimatorRepositoryImpl._extract_single_value() got an unexpected keyword argument 'default_value'

tests/test_repository.py:114: TypeError
___________________________________________________________ test_mapper_to_benefit_request ____________________________________________________________

valid_request_data = {'benefitProductType': 'Medical', 'languageCode': '11', 'membershipId': '5~186103331+10+7+20240101+793854+8A+829', 'pr...000317', 'providerNetworkParticipation': {'providerTier': '1'}, 'providerNetworks': {'networkID': '58921'}, ...}], ...}

    @pytest.mark.service
    def test_mapper_to_benefit_request(valid_request_data):
        """Test the mapper's to_benefit_request method."""
        from app.mappers.cost_estimator_mapper import CostEstimatorMapper
        from app.schemas.cost_estimator_request import CostEstimatorRequest
    
        # Create a request object from the data
>       request = CostEstimatorRequest(**valid_request_data)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CostEstimatorRequest
E       providerInfo.0.speciality
E         Field required [type=missing, input_value={'serviceLocation': '0007...: {'providerTier': '1'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       providerInfo.0.nationalProviderId
E         Field required [type=missing, input_value={'serviceLocation': '0007...: {'providerTier': '1'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_service.py:69: ValidationError
____________________________________________________________ test_mapper_to_rate_criteria _____________________________________________________________

valid_request_data = {'benefitProductType': 'Medical', 'languageCode': '11', 'membershipId': '5~186103331+10+7+20240101+793854+8A+829', 'pr...000317', 'providerNetworkParticipation': {'providerTier': '1'}, 'providerNetworks': {'networkID': '58921'}, ...}], ...}

    @pytest.mark.service
    def test_mapper_to_rate_criteria(valid_request_data):
        """Test the mapper's to_rate_criteria method."""
        from app.mappers.cost_estimator_mapper import CostEstimatorMapper
        from app.schemas.cost_estimator_request import CostEstimatorRequest
    
        # Create a request object from the data
>       request = CostEstimatorRequest(**valid_request_data)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for CostEstimatorRequest
E       providerInfo.0.speciality
E         Field required [type=missing, input_value={'serviceLocation': '0007...: {'providerTier': '1'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing
E       providerInfo.0.nationalProviderId
E         Field required [type=missing, input_value={'serviceLocation': '0007...: {'providerTier': '1'}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.11/v/missing

tests/test_service.py:83: ValidationError
_____________________________________________________________ test_service_estimate_cost ______________________________________________________________
async def functions are not natively supported.
You need to install a suitable plugin for your async framework, for example:
  - anyio
  - pytest-asyncio
  - pytest-tornasync
  - pytest-trio
  - pytest-twisted
=============================================================== short test summary info ===============================================================
FAILED tests/test_integration.py::test_full_api_integration - assert 400 == 200
FAILED tests/test_integration.py::test_api_error_handling - AssertionError: assert 'rate' in {'correlationId': '069d197a-1e14-453f-8cf4-63f74eb626ff', 'detail': 'Malformed request', 'errors': {'Missing fiel...
FAILED tests/test_integration.py::test_service_integration_with_real_data - Failed: async def functions are not natively supported.
FAILED tests/test_integration.py::test_mapper_integration - pydantic_core._pydantic_core.ValidationError: 2 validation errors for CostEstimatorRequest
FAILED tests/test_integration.py::test_end_to_end_flow - pydantic_core._pydantic_core.ValidationError: 5 validation errors for CostEstimatorRequest
FAILED tests/test_integration_real.py::test_real_service_integration - Failed: async def functions are not natively supported.
FAILED tests/test_repository.py::test_extract_single_value - TypeError: CostEstimatorRepositoryImpl._extract_single_value() got an unexpected keyword argument 'default_value'
FAILED tests/test_service.py::test_mapper_to_benefit_request - pydantic_core._pydantic_core.ValidationError: 2 validation errors for CostEstimatorRequest
FAILED tests/test_service.py::test_mapper_to_rate_criteria - pydantic_core._pydantic_core.ValidationError: 2 validation errors for CostEstimatorRequest
FAILED tests/test_service.py::test_service_estimate_cost - Failed: async def functions are not natively supported.
ERROR tests/test_repository.py::test_rate_criteria_creation - TypeError: CostEstimatorRateCriteria.__init__() missing 2 required positional arguments: 'providerSpecialtyCode' and 'providerType'
ERROR tests/test_repository.py::test_repository_initialization - TypeError: CostEstimatorRateCriteria.__init__() missing 2 required positional arguments: 'providerSpecialtyCode' and 'providerType'
ERROR tests/test_repository.py::test_build_rate_params - TypeError: CostEstimatorRateCriteria.__init__() missing 2 required positional arguments: 'providerSpecialtyCode' and 'providerType'
================================================= 10 failed, 15 passed, 4 skipped, 3 errors in 0.13s ==================================================
N133723@MACL2KVFV33RR cost-estimator-calc-service % 
