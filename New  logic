        default_rate_query = RATE_QUERIES.get("get_default_rate")
        if not default_rate_query:
            logger.error("get_default_rate not found in RATE_QUERIES")
            return "NA"
        logger.info(f"Executing default rate query: {default_rate_query} with params: {params}")

        rate_rows = await self.db.execute_query(default_rate_query, params)
        logger.info(f"return rows: {rate_rows}")
        if not rate_rows:
            logger.info("No rate rows found for default payment methods")
        else:
            if len(rate_rows) == 1:
                rate = self._extract_single_value(rate_rows, column_index=1)
                if rate is not None and str(rate).strip() != "" and self._is_float(rate) and float(rate) > 0:
                    return str(rate)
                else:
                    logger.warning("Single rate row found but rate is invalid or empty")

        selected_method = self._get_best_payment_method(rate_rows)
        if selected_method:
            return str(selected_method[1])

        # Fallback to non-standard rate
        non_standard_rate_query = RATE_QUERIES.get("get_non_standard_rate")
        if not non_standard_rate_query:
            logger.error("get_non_standard_rate not found in RATE_QUERIES")
            return "NA"

        rate_rows = await self.db.execute_query(non_standard_rate_query, params)
        if not rate_rows:
            logger.info("No rate rows found for non-standard payment methods")
            return "NA"

        if len(rate_rows) == 1:
            rate = self._extract_single_value(rate_rows, column_index=1)
            if rate is not None and str(rate).strip() != "" and self._is_float(rate) and float(rate) > 0:
                return str(rate)
            else:
                logger.warning("Single non-standard rate row found but rate is invalid or empty")

        selected_method = self._get_best_payment_method(rate_rows)
        if selected_method:
            return str(selected_method[1])
